{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n/*\n  ~ What it does? ~\n\n  Enables you to keep track of events \n\n  ~ How can I use? ~\n\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the event in the contract, in this case we keep track of \"SetPurpose\" event\n  - Specify the provider \n*/\n\nexport default function useEventListener(contracts, contractName, eventName, provider, startBlock, args) {\n  _s();\n\n  const [updates, setUpdates] = useState([]);\n  useEffect(() => {\n    if (typeof provider !== \"undefined\" && typeof startBlock !== \"undefined\") {\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\n      //provider.resetEventsBlock(startBlock);\n      console.log(\"okok\");\n    }\n\n    if (contracts && contractName && contracts[contractName]) {\n      try {\n        contracts[contractName].on(eventName, (...args) => {\n          let blockNumber = args[args.length - 1].blockNumber;\n          setUpdates(messages => [Object.assign({\n            blockNumber\n          }, args.pop().args), ...messages]);\n        });\n        return () => {\n          contracts[contractName].removeListener(eventName);\n        };\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, [provider, startBlock, contracts, contractName, eventName]);\n  return updates;\n}\n\n_s(useEventListener, \"fVrOiUJT6HOXWZMzGi+YrfallHw=\");","map":{"version":3,"sources":["/Users/edaakturk/Desktop/multi-sig/scaffold-eth/packages/react-app/src/hooks/EventListener.js"],"names":["useState","useEffect","useEventListener","contracts","contractName","eventName","provider","startBlock","args","updates","setUpdates","console","log","on","blockNumber","length","messages","Object","assign","pop","removeListener","e"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,gBAAT,CAA0BC,SAA1B,EAAqCC,YAArC,EAAmDC,SAAnD,EAA8DC,QAA9D,EAAwEC,UAAxE,EAAoFC,IAApF,EAA0F;AAAA;;AACvG,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,EAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,OAAOK,QAAP,KAAoB,WAApB,IAAmC,OAAOC,UAAP,KAAsB,WAA7D,EAA0E;AACxE;AACA;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD;;AACD,QAAIT,SAAS,IAAIC,YAAb,IAA6BD,SAAS,CAACC,YAAD,CAA1C,EAA0D;AACxD,UAAI;AACFD,QAAAA,SAAS,CAACC,YAAD,CAAT,CAAwBS,EAAxB,CAA2BR,SAA3B,EAAsC,CAAC,GAAGG,IAAJ,KAAa;AACjD,cAAIM,WAAW,GAAGN,IAAI,CAACA,IAAI,CAACO,MAAL,GAAY,CAAb,CAAJ,CAAoBD,WAAtC;AACAJ,UAAAA,UAAU,CAACM,QAAQ,IAAI,CAACC,MAAM,CAACC,MAAP,CAAc;AAACJ,YAAAA;AAAD,WAAd,EAA4BN,IAAI,CAACW,GAAL,GAAWX,IAAvC,CAAD,EAA+C,GAAGQ,QAAlD,CAAb,CAAV;AACD,SAHD;AAIA,eAAO,MAAM;AACXb,UAAAA,SAAS,CAACC,YAAD,CAAT,CAAwBgB,cAAxB,CAAuCf,SAAvC;AACD,SAFD;AAGD,OARD,CAQE,OAAOgB,CAAP,EAAU;AACVV,QAAAA,OAAO,CAACC,GAAR,CAAYS,CAAZ;AACD;AACF;AACF,GAnBQ,EAmBN,CAACf,QAAD,EAAWC,UAAX,EAAuBJ,SAAvB,EAAkCC,YAAlC,EAAgDC,SAAhD,CAnBM,CAAT;AAqBA,SAAOI,OAAP;AACD;;GAzBuBP,gB","sourcesContent":["import { useState, useEffect } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Enables you to keep track of events \n\n  ~ How can I use? ~\n\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the event in the contract, in this case we keep track of \"SetPurpose\" event\n  - Specify the provider \n*/\n\nexport default function useEventListener(contracts, contractName, eventName, provider, startBlock, args) {\n  const [updates, setUpdates] = useState([]);\n\n  useEffect(() => {\n    if (typeof provider !== \"undefined\" && typeof startBlock !== \"undefined\") {\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\n      //provider.resetEventsBlock(startBlock);\n      console.log(\"okok\");\n    }\n    if (contracts && contractName && contracts[contractName]) {\n      try {\n        contracts[contractName].on(eventName, (...args) => {\n          let blockNumber = args[args.length-1].blockNumber\n          setUpdates(messages => [Object.assign({blockNumber},args.pop().args), ...messages]);\n        });\n        return () => {\n          contracts[contractName].removeListener(eventName);\n        };\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, [provider, startBlock, contracts, contractName, eventName]);\n\n  return updates;\n}\n"]},"metadata":{},"sourceType":"module"}