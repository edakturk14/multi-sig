{"ast":null,"code":"var _jsxFileName = \"/Users/edaakturk/Desktop/multi-sig/scaffold-eth/packages/react-app/src/views/Transactions.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button, List, Spin } from \"antd\";\nimport { parseEther } from \"@ethersproject/units\";\nimport { ethers } from \"ethers\";\nimport { TransactionListItem } from \"../components\";\nimport { usePoller } from \"../hooks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst axios = require(\"axios\");\n\nexport default function Transactions({\n  poolServerUrl,\n  contractName,\n  signaturesRequired,\n  address,\n  nonce,\n  userProvider,\n  mainnetProvider,\n  localProvider,\n  yourLocalBalance,\n  price,\n  tx,\n  readContracts,\n  writeContracts,\n  blockExplorer\n}) {\n  _s();\n\n  const [transactions, setTransactions] = useState();\n  usePoller(() => {\n    const getTransactions = async () => {\n      if (true) console.log(\"ðŸ›° Requesting Transaction List\");\n      const res = await axios.get(poolServerUrl + address + \"_\" + 31337);\n      console.log(\"****creating the tx****\");\n      console.log(res);\n      const newTransactions = [];\n\n      for (const i in res.data) {\n        // console.log(\"look through signatures of \",res.data[i])\n        const thisNonce = ethers.BigNumber.from(res.data[i].nonce);\n\n        if (thisNonce && nonce && thisNonce.gte(nonce)) {\n          const validSignatures = [];\n\n          for (const s in res.data[i].signatures) {\n            // console.log(\"RECOVER:\",res.data[i].signatures[s],res.data[i].hash)\n            const signer = await readContracts[contractName].recover(res.data[i].hash, res.data[i].signatures[s]);\n            const isOwner = await readContracts[contractName].isOwner(signer);\n\n            if (signer && isOwner) {\n              validSignatures.push({\n                signer,\n                signature: res.data[i].signatures[s]\n              });\n            }\n          }\n\n          const update = { ...res.data[i],\n            validSignatures\n          }; // console.log(\"update\",update)\n\n          newTransactions.push(update);\n        }\n      }\n\n      setTransactions(newTransactions);\n      console.log(\"Loaded\", newTransactions.length);\n    };\n\n    if (readContracts) getTransactions();\n  }, 3777);\n\n  const getSortedSigList = async (allSigs, newHash) => {\n    console.log(\"allSigs\", allSigs);\n    const sigList = [];\n\n    for (const s in allSigs) {\n      console.log(\"SIG\", allSigs[s]);\n      const recover = await readContracts[contractName].recover(newHash, allSigs[s]);\n      sigList.push({\n        signature: allSigs[s],\n        signer: recover\n      });\n    }\n\n    sigList.sort((a, b) => {\n      return ethers.BigNumber.from(a.signer).sub(ethers.BigNumber.from(b.signer));\n    });\n    console.log(\"SORTED SIG LIST:\", sigList);\n    const finalSigList = [];\n    const finalSigners = [];\n    const used = {};\n\n    for (const s in sigList) {\n      if (!used[sigList[s].signature]) {\n        finalSigList.push(sigList[s].signature);\n        finalSigners.push(sigList[s].signer);\n      }\n\n      used[sigList[s].signature] = true;\n    }\n\n    console.log(\"FINAL SIG LIST:\", finalSigList);\n    return [finalSigList, finalSigners];\n  };\n\n  if (!signaturesRequired) {\n    return /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 12\n    }, this);\n  }\n\n  console.log(\"transactions\", transactions);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 750,\n      margin: \"auto\",\n      marginTop: 32,\n      marginBottom: 32\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        style: {\n          padding: 16\n        },\n        children: [\"#\", nonce ? nonce.toNumber() : /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 65\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      bordered: true,\n      dataSource: transactions,\n      renderItem: item => {\n        console.log(\"ITE88888M\", item);\n        const hasSigned = item.signers.indexOf(address) >= 0;\n        const hasEnoughSignatures = item.signatures.length <= signaturesRequired.toNumber();\n        return /*#__PURE__*/_jsxDEV(TransactionListItem, {\n          item: item,\n          mainnetProvider: mainnetProvider,\n          blockExplorer: blockExplorer,\n          price: price,\n          readContracts: readContracts,\n          contractName: contractName,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [item.signatures.length, \"/\", signaturesRequired.toNumber(), \" \", hasSigned ? \"âœ…\" : \"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: async () => {\n              console.log(\"item.signatures\", item.signatures);\n              const newHash = await readContracts[contractName].getTransactionHash(item.nonce, item.to, parseEther(\"\" + parseFloat(item.amount).toFixed(12)), item.data);\n              console.log(\"newHash\", newHash);\n              const signature = await userProvider.send(\"personal_sign\", [newHash, address]);\n              console.log(\"signature\", signature);\n              const recover = await readContracts[contractName].recover(newHash, signature);\n              console.log(\"recover--->\", recover);\n              const isOwner = await readContracts[contractName].isOwner(recover);\n              console.log(\"isOwner\", isOwner);\n\n              if (isOwner) {\n                const [finalSigList, finalSigners] = await getSortedSigList([...item.signatures, signature], newHash);\n                const res = await axios.post(poolServerUrl, { ...item,\n                  signatures: finalSigList,\n                  signers: finalSigners\n                });\n                console.log(res);\n              } // tx( writeContracts[contractName].executeTransaction(item.to,parseEther(\"\"+parseFloat(item.amount).toFixed(12)), item.data, item.signatures))\n\n            },\n            type: \"secondary\",\n            children: \"Sign\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: async () => {\n              const newHash = await readContracts[contractName].getTransactionHash(item.nonce, item.to, parseEther(\"\" + parseFloat(item.amount).toFixed(12)), item.data);\n              console.log(\"newHash\", newHash);\n              console.log(\"item.signatures\", item.signatures);\n              const [finalSigList] = await getSortedSigList(item.signatures, newHash);\n              tx(writeContracts[contractName].executeTransaction(item.to, parseEther(\"\" + parseFloat(item.amount).toFixed(12)), item.data, finalSigList));\n            },\n            type: hasEnoughSignatures ? \"primary\" : \"secondary\",\n            children: \"Exec\"\n          }, item.hash, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Transactions, \"GRtYiKJgR5+I9wLVM5nnsyuz6yw=\", false, function () {\n  return [usePoller];\n});\n\n_c = Transactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"sources":["/Users/edaakturk/Desktop/multi-sig/scaffold-eth/packages/react-app/src/views/Transactions.jsx"],"names":["React","useState","Button","List","Spin","parseEther","ethers","TransactionListItem","usePoller","axios","require","Transactions","poolServerUrl","contractName","signaturesRequired","address","nonce","userProvider","mainnetProvider","localProvider","yourLocalBalance","price","tx","readContracts","writeContracts","blockExplorer","transactions","setTransactions","getTransactions","console","log","res","get","newTransactions","i","data","thisNonce","BigNumber","from","gte","validSignatures","s","signatures","signer","recover","hash","isOwner","push","signature","update","length","getSortedSigList","allSigs","newHash","sigList","sort","a","b","sub","finalSigList","finalSigners","used","maxWidth","margin","marginTop","marginBottom","padding","toNumber","item","hasSigned","signers","indexOf","hasEnoughSignatures","getTransactionHash","to","parseFloat","amount","toFixed","send","post","executeTransaction"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, List, Spin } from \"antd\";\n\nimport { parseEther} from \"@ethersproject/units\";\nimport { ethers } from \"ethers\";\nimport { TransactionListItem } from \"../components\";\nimport { usePoller } from \"../hooks\";\n\nconst axios = require(\"axios\");\n\nexport default function Transactions({\n  poolServerUrl,\n  contractName,\n  signaturesRequired,\n  address,\n  nonce,\n  userProvider,\n  mainnetProvider,\n  localProvider,\n  yourLocalBalance,\n  price,\n  tx,\n  readContracts,\n  writeContracts,\n  blockExplorer,\n}) {\n  const [transactions, setTransactions] = useState();\n  usePoller(() => {\n    const getTransactions = async () => {\n      if (true) console.log(\"ðŸ›° Requesting Transaction List\");\n      const res = await axios.get(\n        poolServerUrl + address + \"_\" + 31337,\n      );\n      console.log(\"****creating the tx****\");\n      console.log(res);\n      const newTransactions = [];\n      for (const i in res.data) {\n        // console.log(\"look through signatures of \",res.data[i])\n        const thisNonce = ethers.BigNumber.from(res.data[i].nonce);\n        if (thisNonce && nonce && thisNonce.gte(nonce)) {\n          const validSignatures = [];\n          for (const s in res.data[i].signatures) {\n            // console.log(\"RECOVER:\",res.data[i].signatures[s],res.data[i].hash)\n            const signer = await readContracts[contractName].recover(res.data[i].hash, res.data[i].signatures[s]);\n            const isOwner = await readContracts[contractName].isOwner(signer);\n            if (signer && isOwner) {\n              validSignatures.push({ signer, signature: res.data[i].signatures[s] });\n            }\n          }\n          const update = { ...res.data[i], validSignatures };\n          // console.log(\"update\",update)\n          newTransactions.push(update);\n        }\n      }\n      setTransactions(newTransactions);\n      console.log(\"Loaded\",newTransactions.length)\n    };\n    if (readContracts) getTransactions();\n  }, 3777);\n\n  const getSortedSigList = async (allSigs, newHash) => {\n    console.log(\"allSigs\", allSigs);\n\n    const sigList = [];\n    for (const s in allSigs) {\n      console.log(\"SIG\", allSigs[s]);\n      const recover = await readContracts[contractName].recover(newHash, allSigs[s]);\n      sigList.push({ signature: allSigs[s], signer: recover });\n    }\n\n    sigList.sort((a, b) => {\n      return ethers.BigNumber.from(a.signer).sub(ethers.BigNumber.from(b.signer));\n    });\n\n    console.log(\"SORTED SIG LIST:\", sigList);\n\n    const finalSigList = [];\n    const finalSigners = [];\n    const used = {};\n    for (const s in sigList) {\n      if (!used[sigList[s].signature]) {\n        finalSigList.push(sigList[s].signature);\n        finalSigners.push(sigList[s].signer);\n      }\n      used[sigList[s].signature] = true;\n    }\n\n    console.log(\"FINAL SIG LIST:\", finalSigList);\n    return [finalSigList, finalSigners];\n  };\n\n  if (!signaturesRequired) {\n    return <Spin />;\n  }\n\n  console.log(\"transactions\",transactions)\n\n  return (\n    <div style={{ maxWidth: 750, margin: \"auto\", marginTop: 32, marginBottom: 32 }}>\n      <h1>\n        <b style={{ padding: 16 }}>#{nonce ? nonce.toNumber() : <Spin />}</b>\n      </h1>\n\n      <List\n        bordered\n        dataSource={transactions}\n        renderItem={item => {\n          console.log(\"ITE88888M\", item);\n\n          const hasSigned = item.signers.indexOf(address) >= 0;\n          const hasEnoughSignatures = item.signatures.length <= signaturesRequired.toNumber();\n\n          return (\n            <TransactionListItem item={item} mainnetProvider={mainnetProvider} blockExplorer={blockExplorer} price={price} readContracts={readContracts} contractName={contractName}>\n              <span>\n                {item.signatures.length}/{signaturesRequired.toNumber()} {hasSigned ? \"âœ…\" : \"\"}\n              </span>\n              <Button\n                onClick={async () => {\n                  console.log(\"item.signatures\", item.signatures);\n\n                  const newHash = await readContracts[contractName].getTransactionHash(\n                    item.nonce,\n                    item.to,\n                    parseEther(\"\" + parseFloat(item.amount).toFixed(12)),\n                    item.data,\n                  );\n                  console.log(\"newHash\", newHash);\n\n                  const signature = await userProvider.send(\"personal_sign\", [newHash, address]);\n                  console.log(\"signature\", signature);\n\n                  const recover = await readContracts[contractName].recover(newHash, signature);\n                  console.log(\"recover--->\", recover);\n\n                  const isOwner = await readContracts[contractName].isOwner(recover);\n                  console.log(\"isOwner\", isOwner);\n\n                  if (isOwner) {\n                    const [finalSigList, finalSigners] = await getSortedSigList(\n                      [...item.signatures, signature],\n                      newHash,\n                    );\n                    const res = await axios.post(poolServerUrl, {\n                      ...item,\n                      signatures: finalSigList,\n                      signers: finalSigners,\n                    });\n                    console.log(res);\n                  }\n\n                  // tx( writeContracts[contractName].executeTransaction(item.to,parseEther(\"\"+parseFloat(item.amount).toFixed(12)), item.data, item.signatures))\n                }}\n                type=\"secondary\"\n              >\n                Sign\n              </Button>\n              <Button\n\n                key={item.hash}\n                \n                onClick={async () => {\n                  const newHash = await readContracts[contractName].getTransactionHash(\n                    item.nonce,\n                    item.to,\n                    parseEther(\"\" + parseFloat(item.amount).toFixed(12)),\n                    item.data,\n                  );\n                  console.log(\"newHash\", newHash);\n\n                  console.log(\"item.signatures\", item.signatures);\n\n                  const [finalSigList] = await getSortedSigList(item.signatures, newHash);\n\n                  tx(\n                    writeContracts[contractName].executeTransaction(\n                      item.to,\n                      parseEther(\"\" + parseFloat(item.amount).toFixed(12)),\n                      item.data,\n                      finalSigList,\n                    ),\n                  );\n                }}\n                type={hasEnoughSignatures ? \"primary\" : \"secondary\"}\n              >\n                Exec\n              </Button>\n          </TransactionListItem>\n          );\n        }}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}