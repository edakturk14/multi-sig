{"ast":null,"code":"var _jsxFileName = \"/Users/edaakturk/Desktop/multi-sig-challenge/packages/react-app/src/views/Transactions.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Button, List, Divider, Input, Card, DatePicker, Slider, Switch, Progress, Spin } from \"antd\";\nimport { ConsoleSqlOutlined, SyncOutlined } from \"@ant-design/icons\";\nimport { parseEther, formatEther } from \"@ethersproject/units\";\nimport { ethers } from \"ethers\";\nimport { Address, AddressInput, Balance, Blockie, TransactionListItem } from \"../components\";\nimport { usePoller } from \"eth-hooks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst axios = require(\"axios\");\n\nconst DEBUG = false;\nexport default function Transactions({\n  poolServerUrl,\n  contractName,\n  signaturesRequired,\n  address,\n  nonce,\n  userSigner,\n  mainnetProvider,\n  localProvider,\n  yourLocalBalance,\n  price,\n  tx,\n  readContracts,\n  writeContracts,\n  blockExplorer\n}) {\n  _s();\n\n  const [transactions, setTransactions] = useState();\n  usePoller(() => {\n    const getTransactions = async () => {\n      const res = await axios.get(poolServerUrl + readContracts[contractName].address + \"_\" + localProvider._network.chainId);\n      console.log(\"backend stuff res\", res.data);\n      const newTransactions = [];\n\n      for (const i in res.data) {\n        console.log(\"backend stuff res.data[i]\", res.data[i]);\n        const thisNonce = ethers.BigNumber.from(res.data[i].nonce);\n\n        if (thisNonce && nonce && thisNonce.gte(nonce)) {\n          const validSignatures = [];\n\n          for (const sig in res.data[i].signatures) {\n            const signer = await readContracts[contractName].recover(res.data[i].hash, res.data[i].signatures[sig]);\n            const isOwner = await readContracts[contractName].isOwner(signer);\n\n            if (signer && isOwner) {\n              validSignatures.push({\n                signer,\n                signature: res.data[i].signatures[sig]\n              });\n            }\n          }\n\n          const update = { ...res.data[i],\n            validSignatures\n          };\n          newTransactions.push(update);\n        }\n      }\n\n      console.log(\"backend stuff newTransactions\", newTransactions);\n      setTransactions(newTransactions);\n    };\n\n    if (readContracts[contractName]) getTransactions();\n  }, 3777);\n\n  const getSortedSigList = async (allSigs, newHash) => {\n    const sigList = [];\n\n    for (const sig in allSigs) {\n      const recover = await readContracts[contractName].recover(newHash, allSigs[sig]);\n      sigList.push({\n        signature: allSigs[sig],\n        signer: recover\n      });\n    }\n\n    sigList.sort((a, b) => {\n      return ethers.BigNumber.from(a.signer).sub(ethers.BigNumber.from(b.signer));\n    });\n    const finalSigList = [];\n    const finalSigners = [];\n    const used = {};\n\n    for (const sig in sigList) {\n      if (!used[sigList[sig].signature]) {\n        finalSigList.push(sigList[sig].signature);\n        finalSigners.push(sigList[sig].signer);\n      }\n\n      used[sigList[sig].signature] = true;\n    }\n\n    return [finalSigList, finalSigners];\n  };\n\n  if (!signaturesRequired) {\n    return /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 850,\n      margin: \"auto\",\n      marginTop: 32,\n      marginBottom: 32\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        style: {\n          padding: 16\n        },\n        children: [\"#\", nonce ? nonce.toNumber() : /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 65\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      bordered: true,\n      dataSource: transactions,\n      renderItem: item => {\n        const hasSigned = item.signers.indexOf(address) >= 0;\n        const hasEnoughSignatures = item.signatures.length <= signaturesRequired.toNumber();\n        console.log(\"transaction details:\", item);\n        return /*#__PURE__*/_jsxDEV(TransactionListItem, {\n          item: item,\n          mainnetProvider: mainnetProvider,\n          blockExplorer: blockExplorer,\n          price: price,\n          readContracts: readContracts,\n          contractName: contractName,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              padding: 16\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                padding: 4\n              },\n              children: [item.signatures.length, \"/\", signaturesRequired.toNumber(), \" \", hasSigned ? \"âœ…\" : \"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                padding: 4\n              },\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                type: \"secondary\",\n                onClick: async () => {\n                  const newHash = await readContracts[contractName].getTransactionHash(item.nonce, item.to, parseEther(\"\" + parseFloat(item.amount).toFixed(12)), item.data);\n                  const signature = await (userSigner === null || userSigner === void 0 ? void 0 : userSigner.signMessage(ethers.utils.arrayify(newHash)));\n                  const recover = await readContracts[contractName].recover(newHash, signature);\n                  const isOwner = await readContracts[contractName].isOwner(recover);\n\n                  if (isOwner) {\n                    const [finalSigList, finalSigners] = await getSortedSigList([...item.signatures, signature], newHash);\n                    const res = await axios.post(poolServerUrl, { ...item,\n                      signatures: finalSigList,\n                      signers: finalSigners\n                    });\n                  }\n                },\n                children: \"Sign\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: hasEnoughSignatures ? \"primary\" : \"secondary\",\n                onClick: async () => {\n                  const newHash = await readContracts[contractName].getTransactionHash(item.nonce, item.to, parseEther(\"\" + parseFloat(item.amount).toFixed(12)), item.data);\n                  const [finalSigList, finalSigners] = await getSortedSigList(item.signatures, newHash);\n                  console.log(\"writeContracts: \", item.to, parseEther(\"\" + parseFloat(item.amount).toFixed(12)), item.data, finalSigList);\n                  tx(writeContracts[contractName].executeTransaction(item.to, parseEther(\"\" + parseFloat(item.amount).toFixed(12)), item.data, finalSigList));\n                },\n                children: \"Exec\"\n              }, item.hash, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Transactions, \"GRtYiKJgR5+I9wLVM5nnsyuz6yw=\", false, function () {\n  return [usePoller];\n});\n\n_c = Transactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"sources":["/Users/edaakturk/Desktop/multi-sig-challenge/packages/react-app/src/views/Transactions.jsx"],"names":["React","useCallback","useEffect","useState","Button","List","Divider","Input","Card","DatePicker","Slider","Switch","Progress","Spin","ConsoleSqlOutlined","SyncOutlined","parseEther","formatEther","ethers","Address","AddressInput","Balance","Blockie","TransactionListItem","usePoller","axios","require","DEBUG","Transactions","poolServerUrl","contractName","signaturesRequired","address","nonce","userSigner","mainnetProvider","localProvider","yourLocalBalance","price","tx","readContracts","writeContracts","blockExplorer","transactions","setTransactions","getTransactions","res","get","_network","chainId","console","log","data","newTransactions","i","thisNonce","BigNumber","from","gte","validSignatures","sig","signatures","signer","recover","hash","isOwner","push","signature","update","getSortedSigList","allSigs","newHash","sigList","sort","a","b","sub","finalSigList","finalSigners","used","maxWidth","margin","marginTop","marginBottom","padding","toNumber","item","hasSigned","signers","indexOf","hasEnoughSignatures","length","getTransactionHash","to","parseFloat","amount","toFixed","signMessage","utils","arrayify","post","executeTransaction"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { Button, List, Divider, Input, Card, DatePicker, Slider, Switch, Progress, Spin } from \"antd\";\nimport { ConsoleSqlOutlined, SyncOutlined } from \"@ant-design/icons\";\nimport { parseEther, formatEther } from \"@ethersproject/units\";\nimport { ethers } from \"ethers\";\nimport { Address, AddressInput, Balance, Blockie, TransactionListItem } from \"../components\";\nimport { usePoller } from \"eth-hooks\";\n\nconst axios = require(\"axios\");\n\nconst DEBUG = false;\n\nexport default function Transactions({\n  poolServerUrl,\n  contractName,\n  signaturesRequired,\n  address,\n  nonce,\n  userSigner,\n  mainnetProvider,\n  localProvider,\n  yourLocalBalance,\n  price,\n  tx,\n  readContracts,\n  writeContracts,\n  blockExplorer,\n}) {\n  const [transactions, setTransactions] = useState();\n  usePoller(() => {\n    const getTransactions = async () => {\n      const res = await axios.get(\n        poolServerUrl + readContracts[contractName].address + \"_\" + localProvider._network.chainId,\n      );\n\n      console.log(\"backend stuff res\", res.data);\n\n      const newTransactions = [];\n      for (const i in res.data) {\n        console.log(\"backend stuff res.data[i]\", res.data[i]);\n        const thisNonce = ethers.BigNumber.from(res.data[i].nonce);\n        if (thisNonce && nonce && thisNonce.gte(nonce)) {\n          const validSignatures = [];\n          for (const sig in res.data[i].signatures) {\n            const signer = await readContracts[contractName].recover(res.data[i].hash, res.data[i].signatures[sig]);\n            const isOwner = await readContracts[contractName].isOwner(signer);\n            if (signer && isOwner) {\n              validSignatures.push({ signer, signature: res.data[i].signatures[sig] });\n            }\n          }\n\n          const update = { ...res.data[i], validSignatures };\n          newTransactions.push(update);\n        }\n      }\n\n      console.log(\"backend stuff newTransactions\", newTransactions);\n\n      setTransactions(newTransactions);\n    };\n    if (readContracts[contractName]) getTransactions();\n  }, 3777);\n\n  const getSortedSigList = async (allSigs, newHash) => {\n    const sigList = [];\n    for (const sig in allSigs) {\n      const recover = await readContracts[contractName].recover(newHash, allSigs[sig]);\n      sigList.push({ signature: allSigs[sig], signer: recover });\n    }\n\n    sigList.sort((a, b) => {\n      return ethers.BigNumber.from(a.signer).sub(ethers.BigNumber.from(b.signer));\n    });\n\n    const finalSigList = [];\n    const finalSigners = [];\n    const used = {};\n    for (const sig in sigList) {\n      if (!used[sigList[sig].signature]) {\n        finalSigList.push(sigList[sig].signature);\n        finalSigners.push(sigList[sig].signer);\n      }\n      used[sigList[sig].signature] = true;\n    }\n\n    return [finalSigList, finalSigners];\n  };\n\n  if (!signaturesRequired) {\n    return <Spin />;\n  }\n\n  return (\n    <div style={{ maxWidth: 850, margin: \"auto\", marginTop: 32, marginBottom: 32 }}>\n      <h1>\n        <b style={{ padding: 16 }}>#{nonce ? nonce.toNumber() : <Spin />}</b>\n      </h1>\n\n      <List\n        bordered\n        dataSource={transactions}\n        renderItem={item => {\n          const hasSigned = item.signers.indexOf(address) >= 0;\n          const hasEnoughSignatures = item.signatures.length <= signaturesRequired.toNumber();\n\n          console.log(\"transaction details:\", item);\n\n          return (\n            <TransactionListItem\n              item={item}\n              mainnetProvider={mainnetProvider}\n              blockExplorer={blockExplorer}\n              price={price}\n              readContracts={readContracts}\n              contractName={contractName}\n            >\n              <div style={{padding:16}}>\n              <span style={{padding:4}}>\n                {item.signatures.length}/{signaturesRequired.toNumber()} {hasSigned ? \"âœ…\" : \"\"}\n              </span>\n              <span style={{padding:4}}>\n                <Button\n                  type=\"secondary\"\n                  onClick={async () => {\n                    const newHash = await readContracts[contractName].getTransactionHash(\n                      item.nonce,\n                      item.to,\n                      parseEther(\"\" + parseFloat(item.amount).toFixed(12)),\n                      item.data,\n                    );\n\n                    const signature = await userSigner?.signMessage(ethers.utils.arrayify(newHash));\n                    const recover = await readContracts[contractName].recover(newHash, signature);\n                    const isOwner = await readContracts[contractName].isOwner(recover);\n                    if (isOwner) {\n                      const [finalSigList, finalSigners] = await getSortedSigList(\n                        [...item.signatures, signature],\n                        newHash,\n                      );\n                      const res = await axios.post(poolServerUrl, {\n                        ...item,\n                        signatures: finalSigList,\n                        signers: finalSigners,\n                      });\n                    }\n                  }}\n                >\n                  Sign\n                </Button>\n                <Button\n                  key={item.hash}\n                  type={hasEnoughSignatures ? \"primary\" : \"secondary\"}\n                  onClick={async () => {\n                    const newHash = await readContracts[contractName].getTransactionHash(\n                      item.nonce,\n                      item.to,\n                      parseEther(\"\" + parseFloat(item.amount).toFixed(12)),\n                      item.data,\n                    );\n\n                    const [finalSigList, finalSigners] = await getSortedSigList(item.signatures, newHash);\n\n                    console.log(\"writeContracts: \", item.to, parseEther(\"\" + parseFloat(item.amount).toFixed(12)), item.data, finalSigList);\n\n                    tx(\n                      writeContracts[contractName].executeTransaction(\n                        item.to,\n                        parseEther(\"\" + parseFloat(item.amount).toFixed(12)),\n                        item.data,\n                        finalSigList,\n                      ),\n                    );\n                  }}\n                >\n                  Exec\n                </Button>\n              </span>\n            </div>\n          </TransactionListItem>\n          );\n        }}\n      />\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}