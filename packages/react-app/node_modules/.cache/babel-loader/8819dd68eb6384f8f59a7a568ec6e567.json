{"ast":null,"code":"var _jsxFileName = \"/Users/edaakturk/Desktop/multi-sig-challenge/packages/react-app/src/views/CreateTransaction.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Input, Select, InputNumber, Space, Tooltip } from \"antd\";\nimport { CodeOutlined } from '@ant-design/icons';\nimport { AddressInput, EtherInput } from \"../components\";\nimport TransactionDetailsModal from \"../components/MultiSig/TransactionDetailsModal\";\nimport { useLocalStorage } from \"../hooks\";\nimport { ethers } from \"ethers\";\nimport { parseEther } from \"@ethersproject/units\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\n\nconst axios = require(\"axios\");\n\nexport default function CreateTransaction({\n  poolServerUrl,\n  contractName,\n  contractAddress,\n  mainnetProvider,\n  localProvider,\n  price,\n  readContracts,\n  userSigner,\n  nonce,\n  signaturesRequired\n}) {\n  _s();\n\n  const history = useHistory();\n  const [methodName, setMethodName] = useLocalStorage(\"methodName\", \"transferFunds\");\n  const [newSignaturesRequired, setNewSignaturesRequired] = useState(signaturesRequired);\n  const [amount, setAmount] = useState(\"0\");\n  const [to, setTo] = useLocalStorage(\"to\");\n  const [customCallData, setCustomCallData] = useState(\"\");\n  const [parsedCustomCallData, setParsedCustomCallData] = useState(null);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [isWalletConnectTransaction, setIsWalletConnectTransaction] = useState(false);\n  const [hasEdited, setHasEdited] = useState(); //we want the signaturesRequired to update from the contract _until_ they edit it\n\n  useEffect(() => {\n    if (!hasEdited) {\n      setNewSignaturesRequired(signaturesRequired);\n    }\n  }, [signaturesRequired]);\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const inputStyle = {\n    padding: 10\n  };\n  useEffect(() => {\n    const getParsedTransaction = async () => {\n      const parsedTransaction = await parseExternalContractTransaction(to, customCallData);\n      setParsedCustomCallData(parsedTransaction);\n    };\n\n    getParsedTransaction();\n  }, [customCallData]);\n\n  const loadWalletConnectData = ({\n    to,\n    value,\n    data\n  }) => {\n    setTo(to);\n    value ? setAmount(ethers.utils.formatEther(value)) : setAmount(\"0\");\n    setCustomCallData(data);\n    setIsWalletConnectTransaction(true);\n  };\n\n  useEffect(() => {\n    isWalletConnectTransaction && createTransaction();\n    setIsWalletConnectTransaction(false);\n  }, [isWalletConnectTransaction]);\n\n  const createTransaction = async () => {\n    try {\n      //a little security in the frontend just because \n      if (newSignaturesRequired < 1) {\n        alert(\"signatures required must be >= 1\");\n      } else {\n        setLoading(true);\n        let callData;\n        let executeToAddress;\n\n        if (methodName == \"transferFunds\" || methodName == \"customCallData\" || methodName == \"wcCallData\") {\n          callData = methodName == \"transferFunds\" ? \"0x\" : customCallData;\n          executeToAddress = to;\n        } else {\n          var _readContracts$contra, _readContracts$contra2;\n\n          callData = (_readContracts$contra = readContracts[contractName]) === null || _readContracts$contra === void 0 ? void 0 : (_readContracts$contra2 = _readContracts$contra.interface) === null || _readContracts$contra2 === void 0 ? void 0 : _readContracts$contra2.encodeFunctionData(methodName, [to, newSignaturesRequired]);\n          executeToAddress = contractAddress;\n        }\n\n        const newHash = await readContracts[contractName].getTransactionHash(nonce.toNumber(), executeToAddress, parseEther(\"\" + parseFloat(amount).toFixed(12)), callData);\n        const signature = await (userSigner === null || userSigner === void 0 ? void 0 : userSigner.signMessage(ethers.utils.arrayify(newHash)));\n        console.log(\"signature: \", signature);\n        const recover = await readContracts[contractName].recover(newHash, signature);\n        console.log(\"recover: \", recover);\n        const isOwner = await readContracts[contractName].isOwner(recover);\n        console.log(\"isOwner: \", isOwner);\n\n        if (isOwner) {\n          var _readContracts$contra3;\n\n          const res = await axios.post(poolServerUrl, {\n            chainId: localProvider._network.chainId,\n            address: (_readContracts$contra3 = readContracts[contractName]) === null || _readContracts$contra3 === void 0 ? void 0 : _readContracts$contra3.address,\n            nonce: nonce.toNumber(),\n            to: executeToAddress,\n            amount,\n            data: callData,\n            hash: newHash,\n            signatures: [signature],\n            signers: [recover]\n          });\n          console.log(\"RESULT\", res.data);\n          setTimeout(() => {\n            history.push(\"/pool\");\n            setLoading(false);\n          }, 1000);\n        } else {\n          console.log(\"ERROR, NOT OWNER.\");\n        }\n      }\n    } catch (error) {\n      console.log(\"Error: \", error);\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: \"1px solid #cccccc\",\n        padding: 16,\n        width: 400,\n        margin: \"auto\",\n        marginTop: 64\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: 8\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            margin: 8,\n            padding: 8\n          },\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            value: methodName,\n            style: {\n              width: \"100%\"\n            },\n            onChange: setMethodName,\n            children: [/*#__PURE__*/_jsxDEV(Option, {\n              children: \"Send ETH\"\n            }, \"transferFunds\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Option, {\n              children: \"Add Signer\"\n            }, \"addSigner\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Option, {\n              children: \"Remove Signer\"\n            }, \"removeSigner\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Option, {\n              children: \"Custom Call Data\"\n            }, \"customCallData\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Option, {\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"walletconnect-logo.svg\",\n                style: {\n                  height: 20,\n                  width: 20\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 17\n              }, this), \" WalletConnect\"]\n            }, \"wcCallData\", true, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), methodName == \"wcCallData\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: inputStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: inputStyle,\n            children: /*#__PURE__*/_jsxDEV(AddressInput, {\n              autoFocus: true,\n              ensProvider: mainnetProvider,\n              placeholder: methodName == \"transferFunds\" ? \"Recepient address\" : \"Owner address\",\n              value: to,\n              onChange: setTo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: inputStyle,\n            children: [(methodName == \"addSigner\" || methodName == \"removeSigner\") && /*#__PURE__*/_jsxDEV(InputNumber, {\n              style: {\n                width: \"100%\"\n              },\n              placeholder: \"New # of signatures required\",\n              value: newSignaturesRequired,\n              onChange: value => {\n                setNewSignaturesRequired(value);\n                setHasEdited(true);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 19\n            }, this), methodName == \"customCallData\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Input.Group, {\n                compact: true,\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  style: {\n                    width: 'calc(100% - 31px)',\n                    marginBottom: 20\n                  },\n                  placeholder: \"Custom call data\",\n                  value: customCallData,\n                  onChange: e => {\n                    setCustomCallData(e.target.value);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                  title: \"Parse transaction data\",\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    onClick: showModal,\n                    icon: /*#__PURE__*/_jsxDEV(CodeOutlined, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 196,\n                      columnNumber: 59\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 196,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TransactionDetailsModal, {\n                visible: isModalVisible,\n                txnInfo: parsedCustomCallData,\n                handleOk: () => setIsModalVisible(false),\n                handleCancel: () => setIsModalVisible(false),\n                mainnetProvider: mainnetProvider,\n                price: price\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true), (methodName == \"transferFunds\" || methodName == \"customCallData\") && /*#__PURE__*/_jsxDEV(EtherInput, {\n              price: price,\n              mode: \"USD\",\n              value: amount,\n              onChange: setAmount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Space, {\n            style: {\n              marginTop: 32\n            },\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              loading: loading,\n              onClick: createTransaction,\n              type: \"primary\",\n              children: \"Propose\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreateTransaction, \"LG/twg8BwwQFOiaVmGXTJuNYvkc=\", false, function () {\n  return [useHistory, useLocalStorage, useLocalStorage];\n});\n\n_c = CreateTransaction;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateTransaction\");","map":{"version":3,"sources":["/Users/edaakturk/Desktop/multi-sig-challenge/packages/react-app/src/views/CreateTransaction.jsx"],"names":["React","useEffect","useState","useRef","useHistory","Button","Input","Select","InputNumber","Space","Tooltip","CodeOutlined","AddressInput","EtherInput","TransactionDetailsModal","useLocalStorage","ethers","parseEther","Option","axios","require","CreateTransaction","poolServerUrl","contractName","contractAddress","mainnetProvider","localProvider","price","readContracts","userSigner","nonce","signaturesRequired","history","methodName","setMethodName","newSignaturesRequired","setNewSignaturesRequired","amount","setAmount","to","setTo","customCallData","setCustomCallData","parsedCustomCallData","setParsedCustomCallData","isModalVisible","setIsModalVisible","loading","setLoading","isWalletConnectTransaction","setIsWalletConnectTransaction","hasEdited","setHasEdited","showModal","inputStyle","padding","getParsedTransaction","parsedTransaction","parseExternalContractTransaction","loadWalletConnectData","value","data","utils","formatEther","createTransaction","alert","callData","executeToAddress","interface","encodeFunctionData","newHash","getTransactionHash","toNumber","parseFloat","toFixed","signature","signMessage","arrayify","console","log","recover","isOwner","res","post","chainId","_network","address","hash","signatures","signers","setTimeout","push","error","border","width","margin","marginTop","height","marginBottom","e","target"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Input, Select, InputNumber, Space, Tooltip } from \"antd\";\nimport { CodeOutlined } from '@ant-design/icons';\nimport { AddressInput, EtherInput } from \"../components\";\nimport TransactionDetailsModal from \"../components/MultiSig/TransactionDetailsModal\";\n\nimport { useLocalStorage } from \"../hooks\";\nimport { ethers } from \"ethers\";\nimport { parseEther } from \"@ethersproject/units\";\nconst { Option } = Select;\n\nconst axios = require(\"axios\");\n\nexport default function CreateTransaction({\n  poolServerUrl,\n  contractName,\n  contractAddress,\n  mainnetProvider,\n  localProvider,\n  price,\n  readContracts,\n  userSigner,\n  nonce,\n  signaturesRequired,\n}) {\n  const history = useHistory();\n\n  const [methodName, setMethodName] = useLocalStorage(\"methodName\", \"transferFunds\")\n  const [newSignaturesRequired, setNewSignaturesRequired] = useState(signaturesRequired)\n  const [amount, setAmount] = useState(\"0\");\n  const [to, setTo] = useLocalStorage(\"to\");\n  const [customCallData, setCustomCallData] = useState(\"\");\n  const [parsedCustomCallData, setParsedCustomCallData] = useState(null);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [isWalletConnectTransaction, setIsWalletConnectTransaction] = useState(false);\n\n  const [hasEdited, setHasEdited] = useState() //we want the signaturesRequired to update from the contract _until_ they edit it\n\n  useEffect(()=>{\n    if(!hasEdited){\n      setNewSignaturesRequired(signaturesRequired)\n    }\n  },[signaturesRequired])\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const inputStyle = {\n    padding: 10,\n  };\n\n  useEffect(() => {\n    const getParsedTransaction = async () => {\n      const parsedTransaction = await parseExternalContractTransaction(to, customCallData);\n      setParsedCustomCallData(parsedTransaction);\n    }\n\n    getParsedTransaction();\n  }, [customCallData]);\n\n  const loadWalletConnectData = ({ to, value, data }) => {\n    setTo(to);\n    value ? setAmount(ethers.utils.formatEther(value)) : setAmount(\"0\");\n    setCustomCallData(data);\n    setIsWalletConnectTransaction(true);\n  };\n\n  useEffect(() => {\n    isWalletConnectTransaction && createTransaction();\n    setIsWalletConnectTransaction(false);\n  }, [isWalletConnectTransaction]);\n\n  const createTransaction = async () => {\n    try {\n\n      //a little security in the frontend just because \n      if(newSignaturesRequired<1){\n        alert(\"signatures required must be >= 1\")\n      }else{\n        setLoading(true)\n\n        let callData;\n        let executeToAddress;\n        if (methodName == \"transferFunds\" || methodName == \"customCallData\" || methodName == \"wcCallData\") {\n          callData = methodName == \"transferFunds\" ? \"0x\" : customCallData;\n          executeToAddress = to;\n        } else {\n          callData = readContracts[contractName]?.interface?.encodeFunctionData(methodName, [to, newSignaturesRequired]);\n          executeToAddress = contractAddress;\n        }\n\n        const newHash = await readContracts[contractName].getTransactionHash(\n          nonce.toNumber(),\n          executeToAddress,\n          parseEther(\"\" + parseFloat(amount).toFixed(12)),\n          callData,\n        );\n\n        const signature = await userSigner?.signMessage(ethers.utils.arrayify(newHash));\n        console.log(\"signature: \", signature);\n\n        const recover = await readContracts[contractName].recover(newHash, signature);\n        console.log(\"recover: \", recover);\n\n        const isOwner = await readContracts[contractName].isOwner(recover);\n        console.log(\"isOwner: \", isOwner);\n\n        if (isOwner) {\n          const res = await axios.post(poolServerUrl, {\n            chainId: localProvider._network.chainId,\n            address: readContracts[contractName]?.address,\n            nonce: nonce.toNumber(),\n            to: executeToAddress,\n            amount,\n            data: callData,\n            hash: newHash,\n            signatures: [signature],\n            signers: [recover],\n          });\n\n          console.log(\"RESULT\", res.data);\n          setTimeout(() => {\n            history.push(\"/pool\");\n            setLoading(false);\n          }, 1000);\n        } else {\n          console.log(\"ERROR, NOT OWNER.\");\n        }\n      }\n\n\n    } catch(error) {\n      console.log(\"Error: \", error);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 400, margin: \"auto\", marginTop: 64 }}>\n        <div style={{ margin: 8 }}>\n          <div style={{ margin: 8, padding: 8 }}>\n            <Select value={methodName} style={{ width: \"100%\" }} onChange={setMethodName}>\n              <Option key=\"transferFunds\">Send ETH</Option>\n              <Option key=\"addSigner\">Add Signer</Option>\n              <Option key=\"removeSigner\">Remove Signer</Option>\n              <Option key=\"customCallData\">Custom Call Data</Option>\n              <Option key=\"wcCallData\">\n                <img src=\"walletconnect-logo.svg\" style={{ height: 20, width: 20 }} /> WalletConnect\n              </Option>\n            </Select>\n          </div>\n          {methodName == \"wcCallData\" ? (\n            <div style={inputStyle}>\n\n            </div>\n          ) : (\n            <>\n              <div style={inputStyle}>\n                <AddressInput\n                  autoFocus\n                  ensProvider={mainnetProvider}\n                  placeholder={methodName == \"transferFunds\" ? \"Recepient address\" : \"Owner address\"}\n                  value={to}\n                  onChange={setTo}\n                />\n              </div>\n              <div style={inputStyle}>\n                {(methodName == \"addSigner\" || methodName == \"removeSigner\") &&\n                  <InputNumber\n                    style={{ width: \"100%\" }}\n                    placeholder=\"New # of signatures required\"\n                    value={newSignaturesRequired}\n                    onChange={(value)=>{\n                      setNewSignaturesRequired(value)\n                      setHasEdited(true)\n                    }}\n                  />\n                }\n                {methodName == \"customCallData\" &&\n                  <>\n                    <Input.Group compact>\n                      <Input\n                        style={{ width: 'calc(100% - 31px)', marginBottom: 20 }}\n                        placeholder=\"Custom call data\"\n                        value={customCallData}\n                        onChange={e => {\n                          setCustomCallData(e.target.value);\n                        }}\n                      />\n                      <Tooltip title=\"Parse transaction data\">\n                        <Button onClick={showModal} icon={<CodeOutlined />} />\n                      </Tooltip>\n                    </Input.Group>\n                    <TransactionDetailsModal\n                      visible={isModalVisible}\n                      txnInfo={parsedCustomCallData}\n                      handleOk={() => setIsModalVisible(false)}\n                      handleCancel={() => setIsModalVisible(false)}\n                      mainnetProvider={mainnetProvider}\n                      price={price}\n                    />\n                  </>\n                }\n                {(methodName == \"transferFunds\" || methodName == \"customCallData\") &&\n                  <EtherInput\n                    price={price}\n                    mode=\"USD\"\n                    value={amount}\n                    onChange={setAmount}\n                  />\n                }\n              </div>\n              <Space style={{ marginTop: 32 }}>\n                <Button\n                  loading={loading}\n                  onClick={createTransaction}\n                  type=\"primary\"\n                >\n                  Propose\n                </Button>\n              </Space>\n            </>\n          )}\n        </div>\n\n      </div>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}