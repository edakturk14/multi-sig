{"ast":null,"code":"var _jsxFileName = \"/Users/edaakturk/Desktop/multi-sig/scaffold-eth/packages/react-app/src/views/ExampleUI.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Card, DatePicker, Divider, Input, Progress, Slider, Spin, Switch } from \"antd\";\nimport React, { useState } from \"react\";\nimport { utils } from \"ethers\";\nimport { SyncOutlined } from \"@ant-design/icons\";\nimport { Address, Balance, Events } from \"../components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ExampleUI({\n  purpose,\n  address,\n  mainnetProvider,\n  localProvider,\n  yourLocalBalance,\n  price,\n  tx,\n  readContracts,\n  writeContracts\n}) {\n  _s();\n\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: \"1px solid #cccccc\",\n        padding: 16,\n        width: 400,\n        margin: \"auto\",\n        marginTop: 64\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Example UI:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"purpose: \", purpose]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: 8\n        },\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          onChange: e => {\n            setNewPurpose(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            marginTop: 8\n          },\n          onClick: async () => {\n            /* look how you call setPurpose on your contract: */\n\n            /* notice how you pass a call back for tx updates too */\n            const result = tx(writeContracts.MultiSig.setPurpose(newPurpose), update => {\n              console.log(\"📡 Transaction Update:\", update);\n\n              if (update && (update.status === \"confirmed\" || update.status === 1)) {\n                console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\n                console.log(\" ⛽️ \" + update.gasUsed + \"/\" + (update.gasLimit || update.gas) + \" @ \" + parseFloat(update.gasPrice) / 1000000000 + \" gwei\");\n              }\n            });\n            console.log(\"awaiting metamask/web3 confirm result...\", result);\n            console.log(await result);\n          },\n          children: \"Set Purpose!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), \"Your Address:\", /*#__PURE__*/_jsxDEV(Address, {\n        address: address,\n        ensProvider: mainnetProvider,\n        fontSize: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), \"ENS Address Example:\", /*#__PURE__*/_jsxDEV(Address, {\n        address: \"0x34aA3F359A9D614239015126635CE7732c18fDF3\"\n        /* this will show as austingriffith.eth */\n        ,\n        ensProvider: mainnetProvider,\n        fontSize: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), \"Your Contract Address:\", /*#__PURE__*/_jsxDEV(Address, {\n        address: readContracts && readContracts.YourContract ? readContracts.YourContract.address : null,\n        ensProvider: mainnetProvider,\n        fontSize: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: 8\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            /* look how you call setPurpose on your contract: */\n            tx(writeContracts.YourContract.setPurpose(\"🍻 Cheers\"));\n          },\n          children: \"Set Purpose to \\\"\\uD83C\\uDF7B Cheers\\\"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: 8\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            /*\n            you can also just craft a transaction and send it to the tx() transactor\n            here we are sending value straight to the contract's address:\n            */\n            tx({\n              to: writeContracts.YourContract.address,\n              value: utils.parseEther(\"0.001\")\n            });\n            /* this should throw an error about \"no fallback nor receive function\" until you add it */\n          },\n          children: \"Send Value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: 8\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            /* look how we call setPurpose AND send some value along */\n            tx(writeContracts.YourContract.setPurpose(\"💵 Paying for this one!\", {\n              value: utils.parseEther(\"0.001\")\n            }));\n            /* this will fail until you make the setPurpose function payable */\n          },\n          children: \"Set Purpose With Value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ExampleUI, \"rNqHygrJpXPt1ESBlfztAdtp7Dg=\");\n\n_c = ExampleUI;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExampleUI\");","map":{"version":3,"sources":["/Users/edaakturk/Desktop/multi-sig/scaffold-eth/packages/react-app/src/views/ExampleUI.jsx"],"names":["Button","Card","DatePicker","Divider","Input","Progress","Slider","Spin","Switch","React","useState","utils","SyncOutlined","Address","Balance","Events","ExampleUI","purpose","address","mainnetProvider","localProvider","yourLocalBalance","price","tx","readContracts","writeContracts","newPurpose","setNewPurpose","border","padding","width","margin","marginTop","e","target","value","result","MultiSig","setPurpose","update","console","log","status","hash","gasUsed","gasLimit","gas","parseFloat","gasPrice","YourContract","to","parseEther"],"mappings":"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","sourcesContent":["import { Button, Card, DatePicker, Divider, Input, Progress, Slider, Spin, Switch } from \"antd\";\nimport React, { useState } from \"react\";\nimport { utils } from \"ethers\";\nimport { SyncOutlined } from \"@ant-design/icons\";\n\nimport { Address, Balance, Events } from \"../components\";\n\nexport default function ExampleUI({\n  purpose,\n  address,\n  mainnetProvider,\n  localProvider,\n  yourLocalBalance,\n  price,\n  tx,\n  readContracts,\n  writeContracts,\n}) {\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n\n  return (\n    <div>\n      {/*\n        ⚙️ Here is an example UI that displays and sets the purpose in your smart contract:\n      */}\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 400, margin: \"auto\", marginTop: 64 }}>\n        <h2>Example UI:</h2>\n        <h4>purpose: {purpose}</h4>\n        <Divider />\n        <div style={{ margin: 8 }}>\n          <Input\n            onChange={e => {\n              setNewPurpose(e.target.value);\n            }}\n          />\n          <Button\n            style={{ marginTop: 8 }}\n            onClick={async () => {\n              /* look how you call setPurpose on your contract: */\n              /* notice how you pass a call back for tx updates too */\n              const result = tx(writeContracts.MultiSig.setPurpose(newPurpose), update => {\n                console.log(\"📡 Transaction Update:\", update);\n                if (update && (update.status === \"confirmed\" || update.status === 1)) {\n                  console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\n                  console.log(\n                    \" ⛽️ \" +\n                      update.gasUsed +\n                      \"/\" +\n                      (update.gasLimit || update.gas) +\n                      \" @ \" +\n                      parseFloat(update.gasPrice) / 1000000000 +\n                      \" gwei\",\n                  );\n                }\n              });\n              console.log(\"awaiting metamask/web3 confirm result...\", result);\n              console.log(await result);\n            }}\n          >\n            Set Purpose!\n          </Button>\n        </div>\n\n\n        <Divider />\n        Your Address:\n        <Address address={address} ensProvider={mainnetProvider} fontSize={16} />\n        <Divider />\n        ENS Address Example:\n        <Address\n          address=\"0x34aA3F359A9D614239015126635CE7732c18fDF3\" /* this will show as austingriffith.eth */\n          ensProvider={mainnetProvider}\n          fontSize={16}\n        />\n\n        Your Contract Address:\n        <Address\n          address={readContracts && readContracts.YourContract ? readContracts.YourContract.address : null}\n          ensProvider={mainnetProvider}\n          fontSize={16}\n        />\n        <Divider />\n        <div style={{ margin: 8 }}>\n          <Button\n            onClick={() => {\n              /* look how you call setPurpose on your contract: */\n              tx(writeContracts.YourContract.setPurpose(\"🍻 Cheers\"));\n            }}\n          >\n            Set Purpose to &quot;🍻 Cheers&quot;\n          </Button>\n        </div>\n        <div style={{ margin: 8 }}>\n          <Button\n            onClick={() => {\n              /*\n              you can also just craft a transaction and send it to the tx() transactor\n              here we are sending value straight to the contract's address:\n            */\n              tx({\n                to: writeContracts.YourContract.address,\n                value: utils.parseEther(\"0.001\"),\n              });\n              /* this should throw an error about \"no fallback nor receive function\" until you add it */\n            }}\n          >\n            Send Value\n          </Button>\n        </div>\n        <div style={{ margin: 8 }}>\n          <Button\n            onClick={() => {\n              /* look how we call setPurpose AND send some value along */\n              tx(\n                writeContracts.YourContract.setPurpose(\"💵 Paying for this one!\", {\n                  value: utils.parseEther(\"0.001\"),\n                }),\n              );\n              /* this will fail until you make the setPurpose function payable */\n            }}\n          >\n            Set Purpose With Value\n          </Button>\n        </div>\n      </div>\n\n\n\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}