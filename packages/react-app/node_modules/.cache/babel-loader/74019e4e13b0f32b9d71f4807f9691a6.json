{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from \"react\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport BurnerProvider from \"burner-provider\";\nimport { INFURA_ID } from \"../constants\";\n/*\n  ~ What it does? ~\n\n  Gets user provider\n\n  ~ How can I use? ~\n\n  const userProvider = useUserProvider(injectedProvider, localProvider);\n\n  ~ Features ~\n\n  - Specify the injected provider from Metamask\n  - Specify the local provider\n  - Usage examples:\n    const address = useUserAddress(userProvider);\n    const tx = Transactor(userProvider, gasPrice)\n*/\n\nconst useUserProvider = (injectedProvider, localProvider) => {\n  _s();\n\n  return useMemo(() => {\n    if (injectedProvider) {\n      console.log(\"ðŸ¦Š Using injected provider\");\n      return injectedProvider;\n    }\n\n    if (!localProvider) return undefined;\n    let burnerConfig = {};\n\n    if (window.location.pathname) {\n      if (window.location.pathname.indexOf(\"/pk\") >= 0) {\n        let incomingPK = window.location.hash.replace(\"#\", \"\");\n        let rawPK;\n\n        if (incomingPK.length === 64 || incomingPK.length === 66) {\n          console.log(\"ðŸ”‘ Incoming Private Key...\");\n          rawPK = incomingPK;\n          burnerConfig.privateKey = rawPK;\n          window.history.pushState({}, \"\", \"/\");\n          let currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n\n          if (currentPrivateKey && currentPrivateKey !== rawPK) {\n            window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n          }\n\n          window.localStorage.setItem(\"metaPrivateKey\", rawPK);\n        }\n      }\n    }\n\n    console.log(\"ðŸ”¥ Using burner provider\", burnerConfig);\n\n    if (localProvider.connection && localProvider.connection.url) {\n      burnerConfig.rpcUrl = localProvider.connection.url;\n      return new Web3Provider(new BurnerProvider(burnerConfig));\n    } else {\n      // eslint-disable-next-line no-underscore-dangle\n      const networkName = localProvider._network && localProvider._network.name;\n      burnerConfig.rpcUrl = `https://${networkName || \"mainnet\"}.infura.io/v3/${INFURA_ID}`;\n      return new Web3Provider(new BurnerProvider(burnerConfig));\n    }\n  }, [injectedProvider, localProvider]);\n};\n\n_s(useUserProvider, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");\n\nexport default useUserProvider;","map":{"version":3,"sources":["/Users/edaakturk/Desktop/multi-sig-challenge/packages/react-app/src/hooks/useUserProvider.js"],"names":["useMemo","Web3Provider","BurnerProvider","INFURA_ID","useUserProvider","injectedProvider","localProvider","console","log","undefined","burnerConfig","window","location","pathname","indexOf","incomingPK","hash","replace","rawPK","length","privateKey","history","pushState","currentPrivateKey","localStorage","getItem","setItem","Date","now","connection","url","rpcUrl","networkName","_network","name"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,SAASC,SAAT,QAA0B,cAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,eAAe,GAAG,CAACC,gBAAD,EAAmBC,aAAnB;AAAA;;AAAA,SACxBN,OAAO,CAAC,MAAM;AACZ,QAAIK,gBAAJ,EAAsB;AACpBE,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,aAAOH,gBAAP;AACD;;AACD,QAAI,CAACC,aAAL,EAAoB,OAAOG,SAAP;AAEpB,QAAIC,YAAY,GAAG,EAAnB;;AAEA,QAAGC,MAAM,CAACC,QAAP,CAAgBC,QAAnB,EAA4B;AAC1B,UAAGF,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,OAAzB,CAAiC,KAAjC,KAAyC,CAA5C,EAA8C;AAC5C,YAAIC,UAAU,GAAGJ,MAAM,CAACC,QAAP,CAAgBI,IAAhB,CAAqBC,OAArB,CAA6B,GAA7B,EAAiC,EAAjC,CAAjB;AACA,YAAIC,KAAJ;;AACA,YAAGH,UAAU,CAACI,MAAX,KAAoB,EAApB,IAAwBJ,UAAU,CAACI,MAAX,KAAoB,EAA/C,EAAkD;AAChDZ,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACAU,UAAAA,KAAK,GAACH,UAAN;AACAL,UAAAA,YAAY,CAACU,UAAb,GAA0BF,KAA1B;AACAP,UAAAA,MAAM,CAACU,OAAP,CAAeC,SAAf,CAAyB,EAAzB,EAA4B,EAA5B,EAAgC,GAAhC;AACA,cAAIC,iBAAiB,GAAGZ,MAAM,CAACa,YAAP,CAAoBC,OAApB,CAA4B,gBAA5B,CAAxB;;AACA,cAAGF,iBAAiB,IAAIA,iBAAiB,KAAGL,KAA5C,EAAkD;AAChDP,YAAAA,MAAM,CAACa,YAAP,CAAoBE,OAApB,CAA4B,0BAAwBC,IAAI,CAACC,GAAL,EAApD,EAA+DL,iBAA/D;AACD;;AACDZ,UAAAA,MAAM,CAACa,YAAP,CAAoBE,OAApB,CAA4B,gBAA5B,EAA6CR,KAA7C;AACD;AACF;AACF;;AAEDX,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAuCE,YAAvC;;AACA,QAAIJ,aAAa,CAACuB,UAAd,IAA4BvB,aAAa,CAACuB,UAAd,CAAyBC,GAAzD,EAA8D;AAC5DpB,MAAAA,YAAY,CAACqB,MAAb,GAAsBzB,aAAa,CAACuB,UAAd,CAAyBC,GAA/C;AACA,aAAO,IAAI7B,YAAJ,CAAiB,IAAIC,cAAJ,CAAmBQ,YAAnB,CAAjB,CAAP;AACD,KAHD,MAGK;AACH;AACA,YAAMsB,WAAW,GAAG1B,aAAa,CAAC2B,QAAd,IAA0B3B,aAAa,CAAC2B,QAAd,CAAuBC,IAArE;AACAxB,MAAAA,YAAY,CAACqB,MAAb,GAAuB,WAAUC,WAAW,IAAI,SAAU,iBAAgB7B,SAAU,EAApF;AACA,aAAO,IAAIF,YAAJ,CAAiB,IAAIC,cAAJ,CAAmBQ,YAAnB,CAAjB,CAAP;AACD;AACF,GArCM,EAqCJ,CAACL,gBAAD,EAAmBC,aAAnB,CArCI,CADiB;AAAA,CAAxB;;GAAMF,e;;AAwCN,eAAeA,eAAf","sourcesContent":["import { useMemo } from \"react\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport BurnerProvider from \"burner-provider\";\nimport { INFURA_ID } from \"../constants\";\n\n/*\n  ~ What it does? ~\n\n  Gets user provider\n\n  ~ How can I use? ~\n\n  const userProvider = useUserProvider(injectedProvider, localProvider);\n\n  ~ Features ~\n\n  - Specify the injected provider from Metamask\n  - Specify the local provider\n  - Usage examples:\n    const address = useUserAddress(userProvider);\n    const tx = Transactor(userProvider, gasPrice)\n*/\n\nconst useUserProvider = (injectedProvider, localProvider) =>\nuseMemo(() => {\n  if (injectedProvider) {\n    console.log(\"ðŸ¦Š Using injected provider\");\n    return injectedProvider;\n  }\n  if (!localProvider) return undefined;\n\n  let burnerConfig = {}\n\n  if(window.location.pathname){\n    if(window.location.pathname.indexOf(\"/pk\")>=0){\n      let incomingPK = window.location.hash.replace(\"#\",\"\")\n      let rawPK\n      if(incomingPK.length===64||incomingPK.length===66){\n        console.log(\"ðŸ”‘ Incoming Private Key...\");\n        rawPK=incomingPK\n        burnerConfig.privateKey = rawPK\n        window.history.pushState({},\"\", \"/\");\n        let currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n        if(currentPrivateKey && currentPrivateKey!==rawPK){\n          window.localStorage.setItem(\"metaPrivateKey_backup\"+Date.now(),currentPrivateKey);\n        }\n        window.localStorage.setItem(\"metaPrivateKey\",rawPK);\n      }\n    }\n  }\n\n  console.log(\"ðŸ”¥ Using burner provider\",burnerConfig);\n  if (localProvider.connection && localProvider.connection.url) {\n    burnerConfig.rpcUrl = localProvider.connection.url\n    return new Web3Provider(new BurnerProvider(burnerConfig));\n  }else{\n    // eslint-disable-next-line no-underscore-dangle\n    const networkName = localProvider._network && localProvider._network.name;\n    burnerConfig.rpcUrl = `https://${networkName || \"mainnet\"}.infura.io/v3/${INFURA_ID}`\n    return new Web3Provider(new BurnerProvider(burnerConfig));\n  }\n}, [injectedProvider, localProvider]);\n\nexport default useUserProvider;\n"]},"metadata":{},"sourceType":"module"}