{
  "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_signaturesRequired",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "name": "ExecuteTransaction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "added",
          "type": "bool"
        }
      ],
      "name": "Owner",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSigner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newSignaturesRequired",
          "type": "uint256"
        }
      ],
      "name": "addSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        }
      ],
      "name": "executeTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "getTransactionHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "recover",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oldSigner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newSignaturesRequired",
          "type": "uint256"
        }
      ],
      "name": "removeSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signaturesRequired",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "testingList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3f9c17b542f6acc60b242d3963507efa9e06cb9eab128b711875387ac0e93e18",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
    "transactionIndex": 0,
    "gasUsed": "1245536",
    "logsBloom": "0x
    "blockHash": "0x287cc6a5ea06b61f1498d851f8d677a93da13fc49e4e8746c315156dea5ae20a",
    "transactionHash": "0x3f9c17b542f6acc60b242d3963507efa9e06cb9eab128b711875387ac0e93e18",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8,
        "transactionHash": "0x3f9c17b542f6acc60b242d3963507efa9e06cb9eab128b711875387ac0e93e18",
        "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
        "topics": [
          "0xfe545f48304051c4029eb2da9927daa59da0414b4b084fdceaf2955b609b899e",
          "0x000000000000000000000000f28b54334bd0df28f8dd6b08a7ca00b957479a31"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 0,
        "blockHash": "0x287cc6a5ea06b61f1498d851f8d677a93da13fc49e4e8746c315156dea5ae20a"
      }
    ],
    "blockNumber": 8,
    "cumulativeGasUsed": "1245536",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xf28b54334bD0Df28f8dd6B08a7ca00b957479a31"
    ],
    1
  ],
  "solcInputHash": "d630e03f4e19191022432df62296e58c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_signaturesRequired\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"}],\"name\":\"Owner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newSignaturesRequired\",\"type\":\"uint256\"}],\"name\":\"addSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"executeTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getTransactionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldSigner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newSignaturesRequired\",\"type\":\"uint256\"}],\"name\":\"removeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signaturesRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"testingList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultiSig.sol\":\"MultiSig\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"},\"contracts/MultiSig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n//  Off-chain signature gathering multisig that streams funds - @austingriffith\\n//\\n// started from \\ud83c\\udfd7 scaffold-eth - meta-multi-sig-wallet example https://github.com/austintgriffith/scaffold-eth/tree/meta-multi-sig\\n//    (off-chain signature based multi-sig)\\n//  added a very simple streaming mechanism where `onlySelf` can open a withdraw-based stream\\n//\\n\\npragma solidity >=0.8.0 <0.9.0;\\n// Not needed to be explicitly imported in Solidity 0.8.x\\n// pragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract MultiSig {\\n\\n    using ECDSA for bytes32; // you need this for signatures \\n\\n    event Deposit(address indexed sender, uint amount);\\n\\n    event ExecuteTransaction(address indexed owner, address payable to, uint256 value, bytes data, uint256 nonce, bytes32 hash, bytes result);\\n    event Owner(address indexed owner, bool added);\\n\\n    \\n    mapping(address => bool) public isOwner;\\n\\n    uint public signaturesRequired;\\n\\n    uint public nonce;\\n    uint public chainId;\\n    address[] public owners;\\n    uint[] public testingList = [1, 2, 3];\\n    uint public lastTest = 0;\\n\\n    constructor(address[] memory _owners, uint _signaturesRequired) {\\n        require(_signaturesRequired > 0, \\\"must have required signature\\\");\\n        signaturesRequired = _signaturesRequired;\\n        for (uint i = 0; i < _owners.length; i++) {\\n            address owner = _owners[i];\\n            require(owner != address(0), \\\"ser plz enter address\\\");\\n            require(!isOwner[owner], \\\"ser u are already owner\\\");\\n            isOwner[owner] = true;\\n            owners.push(owner); // add the owner to the state var\\n            emit Owner(owner, isOwner[owner]);\\n        }\\n    }\\n\\n    modifier onlySelf() {\\n        require(isOwner[msg.sender], \\\"ser you are not an owner\\\");\\n        _;\\n    }\\n\\n    function addSigner(address newSigner, uint256 newSignaturesRequired) public onlySelf {\\n        require(newSigner != address(0), \\\"addSigner: zero address\\\");\\n        require(!isOwner[newSigner], \\\"addSigner: owner not unique\\\");\\n        require(newSignaturesRequired > 0, \\\"addSigner: must be non-zero sigs required\\\");\\n        isOwner[newSigner] = true;\\n        signaturesRequired = newSignaturesRequired;\\n        emit Owner(newSigner, isOwner[newSigner]);\\n    }\\n\\n    function removeSigner(address oldSigner, uint256 newSignaturesRequired) public onlySelf {\\n        require(isOwner[oldSigner], \\\"removeSigner: not owner\\\");\\n        require(newSignaturesRequired > 0, \\\"removeSigner: must be non-zero sigs required\\\");\\n        isOwner[oldSigner] = false;\\n        signaturesRequired = newSignaturesRequired;\\n        emit Owner(oldSigner, isOwner[oldSigner]);\\n    }\\n\\n    function getTransactionHash(uint256 _nonce, address to, uint256 value, bytes memory data) public view returns (bytes32) {\\n        return keccak256(abi.encodePacked(address(this), chainId, _nonce, to, value, data));\\n    }\\n\\n    function executeTransaction( address payable to, uint256 value, bytes memory data, bytes[] memory signatures) onlySelf public returns (bytes memory) {\\n        bytes32 _hash =  getTransactionHash(nonce, to, value, data);\\n        nonce++;\\n        uint256 validSignatures;\\n        address duplicateGuard;\\n        for (uint i = 0; i < signatures.length; i++) {\\n            address recovered = recover(_hash,signatures[i]);\\n            require(recovered>duplicateGuard, \\\"executeTransaction: duplicate or unordered signatures\\\");\\n            duplicateGuard = recovered;\\n            if(isOwner[recovered]){\\n              validSignatures++;\\n            }\\n        }\\n\\n        require(validSignatures>=signaturesRequired, \\\"executeTransaction: not enough valid signatures\\\");\\n\\n        (bool success, bytes memory result) = to.call{value: value}(data);\\n        require(success, \\\"executeTransaction: tx failed\\\");\\n\\n        emit ExecuteTransaction(msg.sender, to, value, data, nonce-1, _hash, result);\\n        return result;\\n    }\\n\\n    function recover(bytes32 _hash, bytes memory _signature) public pure returns (address) {\\n        return _hash.toEthSignedMessageHash().recover(_signature);\\n    }\\n\\n    receive() payable external {\\n        emit Deposit(msg.sender, msg.value);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xffe7b83748bfd28f010e6a94551da3773baae0108e9cb9419d24c51f32062c31\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405260016080908152600260a052600360c0819052620000259160059162000278565b5060006006553480156200003857600080fd5b5060405162001626380380620016268339810160408190526200005b9162000301565b60008111620000b15760405162461bcd60e51b815260206004820152601c60248201527f6d7573742068617665207265717569726564207369676e61747572650000000060448201526064015b60405180910390fd5b600181905560005b82518110156200026f576000838281518110620000e657634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006001600160a01b0316816001600160a01b03161415620001555760405162461bcd60e51b815260206004820152601560248201527f73657220706c7a20656e746572206164647265737300000000000000000000006044820152606401620000a8565b6001600160a01b03811660009081526020819052604090205460ff1615620001c05760405162461bcd60e51b815260206004820152601760248201527f73657220752061726520616c7265616479206f776e65720000000000000000006044820152606401620000a8565b6001600160a01b03811660008181526020818152604091829020805460ff1916600190811782556004805491820190557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319168517905554915160ff909216151582527ffe545f48304051c4029eb2da9927daa59da0414b4b084fdceaf2955b609b899e910160405180910390a250806200026681620003dd565b915050620000b9565b5050506200041b565b828054828255906000526020600020908101928215620002bb579160200282015b82811115620002bb578251829060ff1690559160200191906001019062000299565b50620002c9929150620002cd565b5090565b5b80821115620002c95760008155600101620002ce565b80516001600160a01b0381168114620002fc57600080fd5b919050565b6000806040838503121562000314578182fd5b82516001600160401b03808211156200032b578384fd5b818501915085601f8301126200033f578384fd5b815160208282111562000356576200035662000405565b8160051b604051601f19603f830116810181811086821117156200037e576200037e62000405565b604052838152828101945085830182870184018b10156200039d578889fd5b8896505b84871015620003ca57620003b581620002e4565b865260019690960195948301948301620003a1565b5097909101519698969750505050505050565b6000600019821415620003fe57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b6111fb806200042b6000396000f3fe6080604052600436106100ab5760003560e01c806369b52d241161006457806369b52d24146101f95780639a8a05921461020f578063affed0e014610225578063c8beaba01461023b578063ce757d291461025b578063d1fbffa01461027157600080fd5b8063025e7c27146100ec57806319045a25146101295780632f54bf6e146101495780633bad542614610189578063545a4a3c146101ab57806365af1bed146101d957600080fd5b366100e75760405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2005b600080fd5b3480156100f857600080fd5b5061010c610107366004610f39565b61029e565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561013557600080fd5b5061010c610144366004610ef4565b6102c8565b34801561015557600080fd5b50610179610164366004610dab565b60006020819052908152604090205460ff1681565b6040519015158152602001610120565b34801561019557600080fd5b506101a96101a4366004610ec9565b610332565b005b3480156101b757600080fd5b506101cb6101c6366004610f51565b61049a565b604051908152602001610120565b3480156101e557600080fd5b506101a96101f4366004610ec9565b6104d9565b34801561020557600080fd5b506101cb60065481565b34801561021b57600080fd5b506101cb60035481565b34801561023157600080fd5b506101cb60025481565b34801561024757600080fd5b506101cb610256366004610f39565b610687565b34801561026757600080fd5b506101cb60015481565b34801561027d57600080fd5b5061029161028c366004610dc7565b6106a8565b60405161012091906110a7565b600481815481106102ae57600080fd5b6000918252602090912001546001600160a01b0316905081565b600061032b82610325856040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b9061098c565b9392505050565b3360009081526020819052604090205460ff1661036a5760405162461bcd60e51b8152600401610361906110ba565b60405180910390fd5b6001600160a01b03821660009081526020819052604090205460ff166103d25760405162461bcd60e51b815260206004820152601760248201527f72656d6f76655369676e65723a206e6f74206f776e65720000000000000000006044820152606401610361565b600081116104375760405162461bcd60e51b815260206004820152602c60248201527f72656d6f76655369676e65723a206d757374206265206e6f6e2d7a65726f207360448201526b1a59dcc81c995c5d5a5c995960a21b6064820152608401610361565b6001600160a01b03821660008181526020818152604091829020805460ff19168155600185905554915160ff909216151582527ffe545f48304051c4029eb2da9927daa59da0414b4b084fdceaf2955b609b899e91015b60405180910390a25050565b600030600354868686866040516020016104b996959493929190610fde565b604051602081830303815290604052805190602001209050949350505050565b3360009081526020819052604090205460ff166105085760405162461bcd60e51b8152600401610361906110ba565b6001600160a01b03821661055e5760405162461bcd60e51b815260206004820152601760248201527f6164645369676e65723a207a65726f20616464726573730000000000000000006044820152606401610361565b6001600160a01b03821660009081526020819052604090205460ff16156105c75760405162461bcd60e51b815260206004820152601b60248201527f6164645369676e65723a206f776e6572206e6f7420756e6971756500000000006044820152606401610361565b600081116106295760405162461bcd60e51b815260206004820152602960248201527f6164645369676e65723a206d757374206265206e6f6e2d7a65726f2073696773604482015268081c995c5d5a5c995960ba1b6064820152608401610361565b6001600160a01b03821660008181526020818152604091829020805460ff19166001908117825585905554915160ff909216151582527ffe545f48304051c4029eb2da9927daa59da0414b4b084fdceaf2955b609b899e910161048e565b6005818154811061069757600080fd5b600091825260209091200154905081565b3360009081526020819052604090205460609060ff166106da5760405162461bcd60e51b8152600401610361906110ba565b60006106ea60025487878761049a565b6002805491925060006106fc83611169565b919050555060008060005b855181101561080b5760006107438588848151811061073657634e487b7160e01b600052603260045260246000fd5b60200260200101516102c8565b9050826001600160a01b0316816001600160a01b0316116107c45760405162461bcd60e51b815260206004820152603560248201527f657865637574655472616e73616374696f6e3a206475706c6963617465206f7260448201527420756e6f726465726564207369676e61747572657360581b6064820152608401610361565b6001600160a01b038116600090815260208190526040902054909250829060ff16156107f857836107f481611169565b9450505b508061080381611169565b915050610707565b506001548210156108765760405162461bcd60e51b815260206004820152602f60248201527f657865637574655472616e73616374696f6e3a206e6f7420656e6f756768207660448201526e616c6964207369676e61747572657360881b6064820152608401610361565b600080896001600160a01b031689896040516108929190611039565b60006040518083038185875af1925050503d80600081146108cf576040519150601f19603f3d011682016040523d82523d6000602084013e6108d4565b606091505b5091509150816109265760405162461bcd60e51b815260206004820152601d60248201527f657865637574655472616e73616374696f6e3a207478206661696c65640000006044820152606401610361565b336001600160a01b03167f9053e9ec105157fac8c9308d63e6b22be5f50fe915a3e567419b624311a02d748b8b8b60016002546109639190611122565b8a8760405161097796959493929190611055565b60405180910390a29998505050505050505050565b600080600061099b85856109b0565b915091506109a881610a20565b509392505050565b6000808251604114156109e75760208301516040840151606085015160001a6109db87828585610c24565b94509450505050610a19565b825160401415610a115760208301516040840151610a06868383610d11565b935093505050610a19565b506000905060025b9250929050565b6000816004811115610a4257634e487b7160e01b600052602160045260246000fd5b1415610a4b5750565b6001816004811115610a6d57634e487b7160e01b600052602160045260246000fd5b1415610abb5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610361565b6002816004811115610add57634e487b7160e01b600052602160045260246000fd5b1415610b2b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610361565b6003816004811115610b4d57634e487b7160e01b600052602160045260246000fd5b1415610ba65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610361565b6004816004811115610bc857634e487b7160e01b600052602160045260246000fd5b1415610c215760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610361565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610c5b5750600090506003610d08565b8460ff16601b14158015610c7357508460ff16601c14155b15610c845750600090506004610d08565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610cd8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610d0157600060019250925050610d08565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b01610d3287828885610c24565b935093505050935093915050565b600082601f830112610d50578081fd5b813567ffffffffffffffff811115610d6a57610d6a61119a565b610d7d601f8201601f19166020016110f1565b818152846020838601011115610d91578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215610dbc578081fd5b813561032b816111b0565b60008060008060808587031215610ddc578283fd5b8435610de7816111b0565b93506020858101359350604086013567ffffffffffffffff80821115610e0b578485fd5b610e1789838a01610d40565b94506060880135915080821115610e2c578384fd5b818801915088601f830112610e3f578384fd5b813581811115610e5157610e5161119a565b8060051b610e608582016110f1565b8281528581019085870183870188018e1015610e7a578889fd5b8893505b84841015610eb757803586811115610e9457898afd5b610ea28f8a838b0101610d40565b84525060019390930192918701918701610e7e565b50999c989b5096995050505050505050565b60008060408385031215610edb578182fd5b8235610ee6816111b0565b946020939093013593505050565b60008060408385031215610f06578182fd5b82359150602083013567ffffffffffffffff811115610f23578182fd5b610f2f85828601610d40565b9150509250929050565b600060208284031215610f4a578081fd5b5035919050565b60008060008060808587031215610f66578384fd5b843593506020850135610f78816111b0565b925060408501359150606085013567ffffffffffffffff811115610f9a578182fd5b610fa687828801610d40565b91505092959194509250565b60008151808452610fca816020860160208601611139565b601f01601f19169290920160200192915050565b60006bffffffffffffffffffffffff19808960601b168352876014840152866034840152808660601b166054840152508360688301528251611027816088850160208701611139565b91909101608801979650505050505050565b6000825161104b818460208701611139565b9190910192915050565b60018060a01b038716815285602082015260c06040820152600061107c60c0830187610fb2565b85606084015284608084015282810360a084015261109a8185610fb2565b9998505050505050505050565b60208152600061032b6020830184610fb2565b60208082526018908201527f73657220796f7520617265206e6f7420616e206f776e65720000000000000000604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561111a5761111a61119a565b604052919050565b60008282101561113457611134611184565b500390565b60005b8381101561115457818101518382015260200161113c565b83811115611163576000848401525b50505050565b600060001982141561117d5761117d611184565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610c2157600080fdfea2646970667358221220619b38d10aea6250b2dcb37d5a7828ad8b1fe2e0a69987f2a3b4b8fb33ec605264736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 630,
        "contract": "contracts/MultiSig.sol:MultiSig",
        "label": "isOwner",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 632,
        "contract": "contracts/MultiSig.sol:MultiSig",
        "label": "signaturesRequired",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 634,
        "contract": "contracts/MultiSig.sol:MultiSig",
        "label": "nonce",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 636,
        "contract": "contracts/MultiSig.sol:MultiSig",
        "label": "chainId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 639,
        "contract": "contracts/MultiSig.sol:MultiSig",
        "label": "owners",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 646,
        "contract": "contracts/MultiSig.sol:MultiSig",
        "label": "testingList",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 649,
        "contract": "contracts/MultiSig.sol:MultiSig",
        "label": "lastTest",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}